/*
* Worker-related tasks
*
*/

// Dependencies
const path = require('path');
const fs = require('fs');
const _data = require('./data');
const http = require('http');
const https = require('https');
const helpers = require('./helpers');
const url = require('url');

// Instantiate the worker object
const workers = {};

// Timer to execute the worker-process once per minute
workers.loop = function(){
	setInterval(function(){
		
		// A. Check for order leftovers
		workers.gatherOrderLeftovers();

		// B. Check for shoppingCart leftovers
		workers.gatherShoppingCartLeftovers();

		// 1. If there are orders
		// check for order's token, add lastValidityCheckDate
		// and lookup for the token.

		// 2. If token not found then order is leftover (abandoned or failed order)

		// 3. Keep log regarding the abandoned / leftover order
		
		// 4. Delete the abandoned / leftover order

	}, 1000 * 60);
}

// Gather orders
// This api handles orders as described bellow,
//
// The order is getting created once the user submits his/her Cart for paymentProcess (generated by the system verified as the user).
// If cart is pay-able then the order is getting created and exists as long as the payment process and email receipt delivery is completed succesfully,
// Where it should be deleted by the system (as a succesfull order) to the customer user.
workers.gatherOrderLeftovers = function(){

	// Look up orders directory
	_data.list('orders', function(err, orders){
		if(!err && orders && orders.length > 0) {

			// Go through each order
			orders.forEach(function(order){

				//Look up order
				_data.read('orders', order, function(err, orderData){
					if(!err && orderData){

						// Check if order's user email is tokenized
						const userEmail = typeof(orderData.email) == 'string' &&  orderData.email.match(new RegExp(/\w+@\w+\.\w+/g)) != null ? orderData.email : false;

						workers.verifyTokenByEmail(userEmail, function(emailisTokenizedAndValid){
							if(emailisTokenizedAndValid){

								// This cart is currently active
								// console.log('Note: gatherOrderLeftovers, currently active cart: ', cartData.cartId, cartData.email);
								console.log('Note: worker checking, processing order:', orderData.cartId, userEmail);

							} else {

								// This cart is a leftover or needs user to be verified
								// So we need to see when the user was verified for last time OR how much time has passed since then.
								// Finally should log the failure and delete cart
								// console.log('Note: gatherOrderLeftovers, this cart is a leftover or the user is not verified: ', cartData.cartId, cartData.email);
								console.log('Note: worker checking, leftover order:', orderData.cartId, userEmail);

								// Look up the Token responsible and delete it
								// The token also should have been deleted by the user logout
								_data.read('tokens', orderData.userToken, function(err, tokenData){
									if(!err && tokenData) {
										_data.delete('tokens', orderData.userToken, function(err){
											if(!err) {


												// Log failure and delete leftover order
												// Look up the order to be deleted
												_data.delete('orders', orderData.cartId, function(err){
													if(err){
														console.log('Error, Problem deleting specified order');
													}
												});


											} else {
												console.log('Error: Problem deleting specified token');
											}
										});
									} else {
										console.log('Error: Could not find specified token to delete');
									}
								});

							}
						});

					} else {
						console.log('Note: Error, could not read one of the orders');
					}
				});

			});

		} else {
			console.log('Note: Could not find any order in orders dir.');
		}
	});
};

// Gather shoppingCarts
// Regarding the carts, if shoppingcarts dir is not empty then the carts existing inside the specified dir,
// are active users searching for pizzas and pasta.
workers.gatherShoppingCartLeftovers = function(){

	// Look up orders directory
	_data.list('shoppingcarts', function(err, shoppingCarts){
		if(!err && shoppingCarts && shoppingCarts.length > 0) {

			// Go through each cart
			shoppingCarts.forEach(function(cart){

				//Look up cart
				_data.read('shoppingcarts', cart, function(err, cartData){
					if(!err){

						// get user's email
						const userEmail = typeof(cartData.email) == 'string' && cartData.email.match(new RegExp(/\w+@\w+\.\w+/g)) != null ? cartData.email : false;

						if(userEmail) {

							workers.verifyTokenByEmail(userEmail, function(emailisTokenizedAndValid){
								if(emailisTokenizedAndValid){

									// This cart is currently active
									console.log('Note: gatherShoppingCartLeftovers, currently active cart: ', cartData.cartId, cartData.email);

								} else {

									// This cart is a leftover or needs user to be verified
									// So we need to see when the user was verified for last time OR how much time has passed since then.
									// Finally should log the failure and delete cart
									console.log('Note: gatherShoppingCartLeftovers, this cart is a leftover or the user is not verified: ', cartData.cartId, cartData.email);

								}
							});


						}
						

					} else {
						console.log('Note: Error, could not read one of the shoppingCarts');
					}
				});

			});

		} else {
			console.log('Note: Could not find any cart in shoppingCarts dir');
		}
	});
};


workers.verifyTokenByEmail = function(email, callback) {
	// List all the tokens
	_data.list('tokens', function(err, tokens){

		tokens = typeof(tokens) == 'object' && tokens instanceof Array ? tokens : [];

		if(tokens.length > 0) {

			tokens.forEach(function(token){

				_data.read('tokens', token, function(err, tokenData){ // This file-read needs to file-close 
					if(!err && tokenData){
						if(tokenData.email === email) {
							if(tokenData.expires > Date.now()) {
								callback(true);
							} else {
								callback(false);
								// callback('Error, token for this user has expired for THAT amount of time');
							}
						} else {
							// Go to next token
							return;
						}
					} else {
						console.log('Note: verifyTokenByEmail, Error: could not find specified token');
					}
				});

			});

		} else {
			console.log('Note: Tokens are empty - there are not any tokens inside the specified directory');
		}


	});
}

// Initialize workers
workers.init = function(){

	// Check if orders, shoppingCarts is empty
	workers.gatherOrderLeftovers();
	workers.gatherShoppingCartLeftovers();

	// Do System checks later on
	workers.loop();

}

// Export module
module.exports = workers;